#INSTRUCTIONS
# 1. setup vagrant with vagrant-aws plugin
# 2. setup aws cli v2. with a profile saved to ~/.aws/credentials (just follow the aws cli v2 tutorial)
# 3. setup keypairs with AWS for vagrant to login with: https://us-west-1.console.aws.amazon.com/ec2/v2/home?region=us-west-1#KeyPairs:
#   a. export AWS_PRIVATE_KEY_PATH="/Users/xxx/.ssh/THE_AWS_KEY_YOU_USE_FROM_THE_AWS_CLI_V2_TUTORAL.pem";
#   b. export AWS_KEYPAIR_NAME="THE_AWS_KEY_NAME"
# 5. vagrant up
##-----------------------------------------------------------------------
## Machines definintsons

#Epic machines 3.3ghz
#  -CORES: Number of processors
#  -MEM: Amount of physical memory installed
#  -CTIME: Time to compile from scratch in minutes
#  -RTIME: Time to re-compline
#  -COST: AWS East cost / hour
#--------------------------------------------------------------
#MACHINE         CORES     MEM     CITME     RITME     COST
#--------------------------------------------------------------
#c5d.24xlarge:      96     192        42               3.70
#c5d.16xlarge:      64     128        59               2.46
#c5a.12xlarge:      48      96        70               1.85
#c5a.8xlarge:       32      64        93               1.23
#c5a.4xlarge:       16      32     crash                .62
#c5a.2xlarge:        8      16         -                .31
#c5a.xlarge:                 8         -                .15
#c5a.large:                  4         -                .08
MACH7="c5d.24xlarge"
MACH6="c5a.16xlarge"
MACH5="c5a.12xlarge"
MACH4="c5a.8xlarge"
MACH3="c5a.4xlarge"
MACH2="c5a.2xlarge"
MACH1="c5a.xlarge"
MACH0="c5a.large"

DEFAULT_MACH=MACH7

UBUNTU2004_AMD64="ami-0a35dcc4aa0574b59"
UBUNTU1804_AMD64="ami-0cac0a7e7f05274f6"
QEMUCUSTOM="ami-0135b7152025be0f3"

class Hash
  def slice(*keep_keys)
    h = {}
    keep_keys.each { |key| h[key] = fetch(key) if has_key?(key) }
    h
  end unless Hash.method_defined?(:slice)
  def except(*less_keys)
    slice(*keys - less_keys)
  end unless Hash.method_defined?(:except)
end

def which(cmd)
  system("which #{ cmd} > /dev/null 2>&1")
end

class String
  # colorization
  def colorize(color_code)
    "\e[#{color_code}m#{self}\e[0m"
  end

  def red
    colorize(31)
  end

  def green
    colorize(32)
  end

  def yellow
    colorize(33)
  end

  def blue
    colorize(34)
  end

  def pink
    colorize(35)
  end

  def light_blue
    colorize(36)
  end
end

def setEnv()
   puts "The programming language is #{a1}"
   puts "The programming language is #{a2}"
end

require 'json'
#UBUNTU 20.04 ARM64
Vagrant.configure("2") do |awsmachines|
  require 'vagrant-aws'
  awsmachines.vm.box = "dummy"
  awsmachines.vm.allowed_synced_folder_types = [:rsync]
  awsmachines.trigger.after [:reload, :up] do |trigger|
    trigger.info = "Setting up ssh config"
    trigger.ruby do |env,machine|
      if which("storm")
        #if https://github.com/emre/storm present, updates ~/.ssh/config
        sshkeypath = ENV['AWS_PRIVATE_KEY_PATH']
        chost = machine.provider.instance_variable_get(:@machine).instance_variable_get(:@provider_config).instance_variable_get(:@tags)["Name"]
        cuser = machine.provider.instance_variable_get(:@machine).instance_variable_get(:@provider_config).instance_variable_get(:@tags)["user"]
        chostvncport = machine.provider.instance_variable_get(:@machine).instance_variable_get(:@provider_config).instance_variable_get(:@tags)["hostvncport"]
        puts machine.provider.instance_variable_get(:@machine).instance_variable_get(:@provider_config).instance_variable_get(:@tags)
        chostname = machine.provider.ssh_info[:host];
        cport = machine.provider.ssh_info[:port];
        ckpath = machine.provider.instance_variable_get(:@machine).instance_variable_get(:@config).instance_variable_get(:@keys).to_s
        ckpath = ckpath.split('@private_key_path=["')[1].strip.to_s.split('"]')[0].strip.to_s
        puts `storm delete #{chost} >> /dev/null 2>&1`
        if "#{chostvncport}" != ""
          vncline = "--o 'localforward=#{chostvncport} localhost:5901'"
        else
          vncline = ""
        end
        puts "storm add #{chost} #{cuser}@#{chostname}:#{cport} --id_file #{ckpath} --o 'StrictHostKeyChecking=no' --o 'UserKnownHostsFile=/dev/null' --o ForwardAgent=yes #{vncline}"
        puts `storm add #{chost} #{cuser}@#{chostname}:#{cport} --id_file #{ckpath} --o 'StrictHostKeyChecking=no' --o 'UserKnownHostsFile=/dev/null' --o ForwardAgent=yes #{vncline}`
        puts "SSH Capability added:".yellow+" ssh #{chost}".light_blue
      end
    end
  end
  awsmachines.trigger.after [:destroy, :halt] do |trigger|
    trigger.info = "Setting up ssh config"
    trigger.ruby do |env,machine|
      if which("storm")
        chost = machine.provider.instance_variable_get(:@machine).instance_variable_get(:@provider_config).instance_variable_get(:@tags)["Name"]
        puts `storm delete #{chost}`
      end
    end
  end
class TestClass
  @variable = "var"
  class << self
    attr_accessor :variable
  end
end
class Buildobj
    def initialize(ibranch,imachine,ibuild_directive,iparsec,icerts_path,iimage_name)
      @branch = ibranch
      @machine = imachine
      @buildDirective = ibuild_directive
      @parsecMode = iparsec
      @certsPath = icerts_path
      @imageName = iimage_name
    end
    def about()
      puts "Branch: ".yellow+self.branch.light_blue
      puts "Machine: ".yellow+self.machine.light_blue
      puts "Build directive: ".yellow+self.buildDirective.light_blue
      puts "parsec mode: ".yellow+self.parsecMode.light_blue
      puts "certs path: ".yellow+self.certsPath.light_blue
      puts "image: ".yellow+self.imageName.light_blue  
    end
    attr_accessor :branch, :machine, :buildDirective, :parsecMode, :certsPath, :imageName
end



def _stats(obj)
 
end



#-----------------------------------------------------------------------------------------------------#
#                         ___        _      _      ____  _             _                              #
#                        / _ \ _   _(_) ___| | __ / ___|| |_ __ _ _ __| |_ ___                        #
#                       | | | | | | | |/ __| |/ / \___ \| __/ _` | '__| __/ __|                       #
#                       | |_| | |_| | | (__|   <   ___) | || (_| | |  | |_\__ \                       #
#                        \__\_\\__,_|_|\___|_|\_\ |____/ \__\__,_|_|   \__|___/                       #
#                                                                                                     #
#         https://developer.pelion.com/docs/device-management-edge/2.2/quick-start/index.html         #
#-----------------------------------------------------------------------------------------------------#

# This section attempts to provide a builder for each of the quick starts, as written by 
# Preque

# Quick start: LMP
# Descripion: Builds exactly as outlined in the quick start.  See the "Dev Maps" section for people who want to work on the builds
# Build OS: Ubunu 20.04 (note quick start calls for 18.04)
# Permutations
#     - image console-image
#     - Machine: imx8
#     - Mode: developer
#     - Parsec: n/a



  awsmachines.vm.define "quickstart" do |config_quickstart|

    aimage = ENV['IMAGE']
    amachine = ENV['MACHINE']
    abuild = ENV['BUILDMODE']
    repo_branch = ENV['BRANCH']
    build_directive = "pretendbuild"
    build_directive = "build"
    mode="promodeHost"
    mode="devmodeHost"
    parsecMode="enableParsec"
    parsecMode="disableParsec"
    certs="~/CERTS/PRO-CLOUD-GL"
    certs="~/CERTS/PRO-CLOUD-NEW"
    aimage = "console-image-lmp" if aimage.nil?
    #machine target.  Supported machines are: raspberrypi3-64, raspberrypi4-64, imx8mmevk imx8mmsolidrun, uz3eg-iocc
    amachine = "uz3eg-iocc" if amachine.nil?
    abuild = "devmode" if abuild.nil?
    repo_branch = "master" if ENV['BRANCH'].nil?
    repo_branch = "update_to_lmp_v83" if ENV['BRANCH'].nil?
    repo_branch = "dev" if ENV['BRANCH'].nil?
    config_quickstart.ssh.forward_agent = true
    quickstartObj = Buildobj.new(repo_branch,amachine,build_directive,parsecMode,certs,aimage)
    config_quickstart.vm.provider :aws do |aws, override|
      aws.ami = ""+UBUNTU2004_AMD64+""
      aws.aws_dir = ENV['HOME'] + "/.aws/"
      aws.aws_profile = "default"
      aws.security_groups = ["default"]
      aws.keypair_name = ENV['AWS_KEYPAIR_NAME']
      aws.region = 'us-east-1'
      aws.instance_type = ""+DEFAULT_MACH+""
      aws.tags = {
        'Name' => "quickstart",
        'creator' => ENV['USER'],
        'os' => 'ubuntu',
        'user'=> 'ubuntu'
      }
      aws.block_device_mapping = [{ 'DeviceName' => '/dev/sda1', 'Ebs.VolumeSize' => 100 }]
      override.ssh.username = "ubuntu"
      override.ssh.private_key_path = ENV['AWS_PRIVATE_KEY_PATH']
    end
      # --------Mapped folders------
      # 1: developer certificates
      #    Uncomment the following to add your developer certificates to the build machine.  The first Path is your local machine, *DO NOT* change the second path: "/home/ubuntu/CERTS/" 
       config_quickstart.vm.synced_folder certs, "/home/ubuntu/CERTS/", type: "rsync", rsync__exclude: ".git/"
      # 2: meta-pelion-edge 
      #    Uncomment the following to map meta-pelion-edge from your local machine into your build machine.  This effectivly replaces the version of meta-pelion-edge that is normally checked out to the contents of your local machine.  The first Path is your local machine, *DO NOT* change the second path: "/home/ubuntu/lmpbuild/layers/" 
      config_quickstart.vm.synced_folder "~/workspace/meta-pelion-edge", "/home/ubuntu/lmpbuild/layers/meta-pelion-edge/", type: "rsync", owner: "ubuntu", group: "ubuntu", rsync__exclude: ".git/", rsync__rsync_ownership: "true", rsync__args: ["--verbose", "--rsync-path='sudo rsync'", "--archive", "--delete", "-z"]
      config_quickstart.vm.synced_folder "~/workspace/meta-mbed-edge", "/home/ubuntu/lmpbuild/layers/meta-mbed-edge/", type: "rsync", owner: "ubuntu", group: "ubuntu", rsync__exclude: ".git/", rsync__rsync_ownership: "true", rsync__args: ["--verbose", "--rsync-path='sudo rsync'", "--archive"]
      config_quickstart.vm.provision "shell", privileged: true, path: "provisioning/ubuntu20_setup.sh",args: ["base lmpOnHost","emacs"]
      config_quickstart.vm.provision "shell", privileged: false, path: "provisioning/configure-lmp.sh", args: ["lmpPrep lmpMpe "+mode+" "+parsecMode+"","quickstart","/home/ubuntu/lmpbuild",repo_branch,ENV['GITHUB_USER'],ENV['GITHUB_EMAIL'],"/home/ubuntu/lmpbuild/layers/*"]
      config_quickstart.vm.provision "shell", privileged: false, path: "provisioning/build-lmp.sh", args: [build_directive,"/home/ubuntu/lmpbuild",amachine,aimage]
      quickstartObj.about 
   end


end